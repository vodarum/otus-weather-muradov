{"version":3,"file":"main.js","mappings":"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","sources":["webpack://otus-weather-app/./src/js/modules/Component/Component.ts","webpack://otus-weather-app/./src/js/models/coord.js","webpack://otus-weather-app/./src/js/models/weather-info.js","webpack://otus-weather-app/./src/js/modules/template-engine/template-engine.ts","webpack://otus-weather-app/./src/js/components/weather-main.js","webpack://otus-weather-app/./src/js/components/weather-map.js","webpack://otus-weather-app/./src/js/components/weather-history.js","webpack://otus-weather-app/./src/js/models/location-info.js","webpack://otus-weather-app/./src/js/modules/api/api.js","webpack://otus-weather-app/./src/js/util/util.js","webpack://otus-weather-app/./src/js/modules/weather-info/weather-info.js","webpack://otus-weather-app/./src/js/index.js","webpack://otus-weather-app/./src/js/components/app.js"],"sourcesContent":["export default class Component {\n  private el: HTMLElement;\n\n  state: {\n    [key: string]: any;\n  } = {};\n\n  events: {\n    [key: string]: (ev: Event) => void;\n  } = {};\n\n  constructor(el: HTMLElement, initialState = {}) {\n    this.state = { ...this.state, ...initialState };\n\n    el.innerHTML = this.render();\n    this.el = el;\n\n    this.onMount();\n\n    Promise.resolve().then(() => this.subscribeToEvents());\n  }\n\n  onMount(): void {\n    /**/\n  }\n\n  render(): string {\n    return ``;\n  }\n\n  setState(patch: { [key: string]: any }): void {\n    this.state = { ...this.state, ...patch };\n    this.el.innerHTML = this.render();\n    this.subscribeToEvents();\n  }\n\n  subscribeToEvents(): void {\n    Object.entries(this.events).forEach(([key, handler]) => {\n      const [eventName, selector] = key.split(\"@\");\n\n      this.el.querySelectorAll(selector).forEach((element) => {\n        element.addEventListener(eventName, handler);\n      });\n    });\n  }\n}\n","export class CoordModel {\n  latitude = null;\n\n  longitude = null;\n\n  constructor(latitude, longitude) {\n    this.latitude = latitude;\n    this.longitude = longitude;\n  }\n}\n","import { CoordModel } from \"./coord\";\n\nexport class WeatherInfoModel {\n  city = null;\n\n  temp = null;\n\n  icon = null;\n\n  coord = new CoordModel();\n\n  constructor(weatherInfo) {\n    this.city = weatherInfo?.name ?? null;\n    this.temp = weatherInfo?.main.temp ?? null;\n    this.icon = weatherInfo?.weather[0].icon ?? null;\n    this.coord = new CoordModel(\n      weatherInfo?.coord.lat ?? null,\n      weatherInfo?.coord.lon ?? null\n    );\n  }\n}\n","class TemplateEngine {\n  render(source: string, data: { [key: string]: any }): string {\n    source = this.replaceLoop(source, data);\n    source = this.replaceCondition(source, data);\n    source = this.replaceVariable(source, data);\n    source = source.replace(/\\s+(?=[.,?!:;])/, \"\");\n\n    return source;\n  }\n\n  /* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"replaceVariable\"] }] */\n  private replaceVariable(\n    source: string,\n    data: { [key: string]: any }\n  ): string {\n    return source.replace(/{{(.[^}}]+)}}/gm, (match, variableName) => {\n      if (/\\./gm.test(variableName)) {\n        return variableName\n          .split(\".\")\n          .reduce(\n            (accumulator: { [key: string]: any }, propertyName: string) =>\n              accumulator[propertyName] ?? accumulator,\n            data\n          );\n      }\n\n      return data[variableName] || \"\";\n    });\n  }\n\n  private replaceCondition(\n    source: string,\n    data: { [key: string]: any }\n  ): string {\n    return source.replace(\n      /{{if (\\w+)}}(.*?){{endif}}/gms,\n      (match: string, condition: string, action: string) => {\n        if (\n          ((condition === \"isFirst\" ||\n            condition === \"isLast\" ||\n            condition === \"notIsFirst\" ||\n            condition === \"notIsLast\") &&\n            data.index[condition]) ||\n          data[condition]\n        ) {\n          return this.render(action, data);\n        }\n\n        return \"\";\n      }\n    );\n  }\n\n  private replaceLoop(source: string, data: { [key: string]: any }): string {\n    return source.replace(\n      /{{for (\\w+) as (\\w+)}}(.+?){{endfor}}/gms,\n      (\n        match: string,\n        collectionName: string,\n        collectionItemName: string,\n        repeatedSource: string\n      ) =>\n        (data[collectionName] || []).reduce(\n          (\n            accumulator: string,\n            item: { [key: string]: any },\n            index: number,\n            array: Array<{ [key: string]: any }>\n          ) => {\n            const itemData: { [key: string]: any } = {\n              index: {\n                value: index,\n                isFirst: index === 0,\n                isLast: index === array.length - 1,\n                notIsFirst: index !== 0,\n                notIsLast: index !== array.length - 1,\n              },\n            };\n\n            itemData[collectionItemName] = item;\n\n            return accumulator + this.render(repeatedSource, itemData);\n          },\n          \"\"\n        )\n    );\n  }\n}\n\nexport default new TemplateEngine();\n","import Component from \"../modules/Component/Component\";\nimport TemplateEngine from \"../modules/template-engine/template-engine\";\n\nexport default class WeatherMainComponent extends Component {\n  render() {\n    if (JSON.stringify(this.state) === \"{}\") {\n      return super.render();\n    }\n\n    return TemplateEngine.render(\n      `{{if icon}}<img src=\"http://openweathermap.org/img/w/{{icon}}.png\" class=\"weather-main__img\">{{endif}}\n      <div class=\"weather-main__text\">\n        {{if city}}<p>Город: {{city}}</p>{{endif}}\n        {{if temp}}<p>Температура: {{temp}}&#176;С</p>{{endif}}\n      </div>`,\n      this.state\n    );\n  }\n}\n","import Component from \"../modules/Component/Component\";\nimport TemplateEngine from \"../modules/template-engine/template-engine\";\n\nexport default class WeatherMapComponent extends Component {\n  render() {\n    if (JSON.stringify(this.state) === \"{}\") {\n      return super.render();\n    }\n\n    return TemplateEngine.render(\n      `<img src=\"https://static-maps.yandex.ru/1.x/?ll={{longitude}},{{latitude}}&size=650,350&z=12&l=map\">`,\n      this.state\n    );\n  }\n}\n","import Component from \"../modules/Component/Component\";\nimport TemplateEngine from \"../modules/template-engine/template-engine\";\n\nexport default class WeatherHistoryComponent extends Component {\n  render() {\n    if (JSON.stringify(this.state) === \"{}\") {\n      return super.render();\n    }\n\n    return TemplateEngine.render(\n      `{{for weatherHistory as item}}\n        <span class=\"weather-history__item\" data-wh-item-id=\"{{index.value}}\">{{item.city}}</span>\n      {{endfor}}`,\n      this.state\n    );\n  }\n}\n","import { CoordModel } from \"./coord\";\n\nexport class LocationInfoModel extends CoordModel {\n  country = null;\n\n  city = null;\n\n  constructor(locationInfo) {\n    super(locationInfo?.latitude ?? null, locationInfo?.longitude ?? null);\n\n    this.country = locationInfo?.country ?? null;\n    this.city = locationInfo?.city ?? null;\n  }\n}\n","import { LocationInfoModel } from \"../../models/location-info\";\nimport { WeatherInfoModel } from \"../../models/weather-info\";\n\nclass API {\n  LOCATION_URL = \"https://get.geojs.io/v1/ip/geo.json\";\n\n  WEATHER_URL = \"https://api.openweathermap.org/data/2.5/weather\";\n\n  WEATHER_API_KEY = \"1cf44d73b10a208539e8d4267c92ac9f\";\n\n  /**\n   * Получить геоданные пользователя\n   */\n  async getCurrentLocationInfo() {\n    let result = new LocationInfoModel();\n\n    try {\n      const response = await fetch(this.LOCATION_URL);\n\n      if (!response.ok) {\n        throw new Error(`HTTP response status ${response.status}`);\n      }\n\n      const json = await response.json();\n\n      result = new LocationInfoModel(json);\n    } catch (error) {\n      console.error(`Error in API.getCurrentLocationInfo: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Получить информацию о погоде по географическим координатам\n   * @param {*} latitude Широта\n   * @param {*} longitude Долгота\n   */\n  async getWeatherInfoByLocationCoord(latitude, longitude) {\n    let result = new WeatherInfoModel();\n\n    try {\n      const url = `${this.WEATHER_URL}?lat=${latitude}&lon=${longitude}&appid=${this.WEATHER_API_KEY}&units=metric&lang=ru`;\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error(`HTTP response status ${response.status}`);\n      }\n\n      const json = await response.json();\n\n      result = new WeatherInfoModel(json);\n    } catch (error) {\n      console.error(\n        `Error in API.getWeatherInfoByLocationCoord: ${error.message}`\n      );\n    }\n\n    return result;\n  }\n\n  /**\n   * Получить информацию о погоде по названию города\n   * @param {*} locationName Название города\n   */\n  async getWeatherInfoByLocationName(locationName) {\n    let result = new WeatherInfoModel();\n\n    if (locationName) {\n      try {\n        const url = `${this.WEATHER_URL}?q=${locationName}&appid=${this.WEATHER_API_KEY}&units=metric&lang=ru`;\n        const response = await fetch(url);\n\n        if (!response.ok) {\n          throw new Error(`HTTP response status ${response.status}`);\n        }\n\n        const json = await response.json();\n\n        result = new WeatherInfoModel(json);\n      } catch (error) {\n        console.error(\n          `Error in API.getWeatherInfoByLocationName: ${error.message}`\n        );\n      }\n    }\n\n    return result;\n  }\n}\n\nexport default new API();\n","const Util = {\n  isDefined(value) {\n    return value !== null && typeof value !== \"undefined\";\n  },\n};\n\nexport default Util;\n","import { CoordModel } from \"../../models/coord\";\nimport { WeatherInfoModel } from \"../../models/weather-info\";\nimport Util from \"../../util/util\";\n\nclass WeatherInfo {\n  /**\n   * Сохранить информацию о погоде в Local Storage\n   * @param {WeatherInfoModel} weatherInfo Информация о погоде\n   */\n  saveWeatherInfo(weatherInfo) {\n    const weatherHistory = JSON.parse(\n      localStorage.getItem(\"weatherHistory\") ?? \"[]\"\n    );\n    const filteredWeatherHistory = weatherHistory.filter(\n      (wI) => wI.city !== weatherInfo.city\n    );\n\n    filteredWeatherHistory.unshift(weatherInfo);\n\n    localStorage.setItem(\n      \"weatherHistory\",\n      JSON.stringify(filteredWeatherHistory.slice(0, 10))\n    );\n  }\n\n  /**\n   * Проверить корректность координат\n   * @param {CoordModel} coord Координаты\n   */\n  validateCoord(coord) {\n    /**\n     * Проверить корректность широты\n     * @param {number} latitude Широта\n     */\n    function _validateLatitude(latitude) {\n      return Util.isDefined(latitude) && +latitude <= 90 && +latitude >= -90;\n    }\n\n    /**\n     * Проверить корректность долготы\n     * @param {number} longitude Долгота\n     */\n    function _validateLongitude(longitude) {\n      return (\n        Util.isDefined(longitude) && +longitude <= 180 && +longitude >= -180\n      );\n    }\n\n    return (\n      coord instanceof CoordModel &&\n      _validateLatitude(coord.latitude) &&\n      _validateLongitude(coord.longitude)\n    );\n  }\n\n  /**\n   * Проверить корректность информации о погоде\n   * @param {WeatherInfoModel} weatherInfo Информация о погоде\n   */\n  validateWeatherInfo(weatherInfo) {\n    return (\n      weatherInfo instanceof WeatherInfoModel &&\n      Util.isDefined(weatherInfo.city) &&\n      Util.isDefined(weatherInfo.temp) &&\n      typeof weatherInfo.temp === \"number\" &&\n      this.validateCoord(weatherInfo.coord)\n    );\n  }\n}\n\nexport default new WeatherInfo();\n","import \"../css/style.css\";\nimport AppComponent from \"./components/app\";\n\nnew AppComponent(document.querySelector(\"body\")); // eslint-disable-line no-new\n","import Component from \"../modules/Component/Component\";\nimport { WeatherInfoModel } from \"../models/weather-info\";\n\nimport WeatherMainComponent from \"./weather-main\";\nimport WeatherMapComponent from \"./weather-map\";\nimport WeatherHistoryComponent from \"./weather-history\";\n\nimport API from \"../modules/api/api\";\nimport WeatherInfo from \"../modules/weather-info/weather-info\";\nimport Util from \"../util/util\";\n\nexport default class AppComponent extends Component {\n  #weatherMain;\n\n  #weatherMap;\n\n  #weatherHistory;\n\n  constructor(el, initialState = new WeatherInfoModel()) {\n    super(el, initialState);\n\n    this.#weatherMain = new WeatherMainComponent(\n      document.querySelector(\"#weather-main\")\n    );\n    this.#weatherMap = new WeatherMapComponent(\n      document.querySelector(\"#weather-map\")\n    );\n    this.#weatherHistory = new WeatherHistoryComponent(\n      document.querySelector(\"#weather-history\")\n    );\n\n    this.events = {\n      \"submit@#form\": (e) => {\n        e?.preventDefault();\n        this.search();\n      },\n      \"click@#weather-history\": (e) => {\n        const weatherHistoryItem = e?.target.closest(\".weather-history__item\");\n\n        if (weatherHistoryItem) {\n          this.selectItemFromWeatherHistory(\n            weatherHistoryItem.dataset.whItemId\n          );\n        }\n      },\n    };\n  }\n\n  onMount() {\n    API.getCurrentLocationInfo()\n      .then((currentLocationInfo) =>\n        API.getWeatherInfoByLocationCoord(\n          currentLocationInfo.latitude,\n          currentLocationInfo.longitude\n        )\n      )\n      .then((weatherInfo) => this.setState(weatherInfo))\n      .catch((error) => console.error(error));\n  }\n\n  render() {\n    return `<main class=\"main\">\n                    <section class=\"section\">\n                        <h1 class=\"title\">Weather App</h1>\n\n                        <form class=\"form\" id=\"form\">\n                            <input type=\"text\" placeholder=\"Enter an address or city name\" class=\"input\" id=\"input\">\n\n                            <button type=\"submit\" class=\"btn\" id=\"btn\">Enter</button>\n                        </form>\n\n                        <div class=\"weather-info\" id=\"weather-info\">\n                            <div class=\"weather-info__item weather-main\" id=\"weather-main\"></div>\n                            <div class=\"weather-info__item weather-map\" id=\"weather-map\"></div>\n                            <div class=\"weather-info__item weather-history\" id=\"weather-history\"></div>\n                        </div>\n                    </section>\n                </main>`;\n  }\n\n  /**\n   * Сохранить состояние\n   * @param {WeatherInfoModel} state\n   */\n  setState(state) {\n    if (WeatherInfo.validateWeatherInfo(state)) {\n      WeatherInfo.saveWeatherInfo(state);\n\n      this.state = state;\n\n      this.#weatherMain.setState(this.state);\n      this.#weatherMap.setState(this.state.coord);\n      this.#weatherHistory.setState(\n        localStorage.getItem(\"weatherHistory\")\n          ? {\n              weatherHistory: JSON.parse(\n                localStorage.getItem(\"weatherHistory\")\n              ),\n            }\n          : {}\n      );\n    }\n  }\n\n  /**\n   * Выбрать элемент Истории\n   * @param {string} id ID записи Истории\n   */\n  async selectItemFromWeatherHistory(id) {\n    if (!Util.isDefined(id)) {\n      return;\n    }\n\n    const weatherHistory = JSON.parse(\n      localStorage.getItem(\"weatherHistory\") ?? \"[]\"\n    );\n\n    const weatherInfoByLocationCoord = await API.getWeatherInfoByLocationCoord(\n      weatherHistory[+id].coord.latitude,\n      weatherHistory[+id].coord.longitude\n    );\n\n    this.setState(weatherInfoByLocationCoord);\n  }\n\n  /**\n   * Найти информацию о погоде в выбранном населенном пункте\n   */\n  async search() {\n    const input = document.getElementById(\"input\");\n\n    try {\n      const weatherInfoByLocationName = await API.getWeatherInfoByLocationName(\n        input.value\n      );\n\n      this.setState(weatherInfoByLocationName);\n    } catch (error) {\n      console.error(`Error in AppComponent.search: ${error}`);\n    } finally {\n      input.value = \"\";\n    }\n  }\n}\n"],"names":["Component","state","events","constructor","el","initialState","this","innerHTML","render","onMount","Promise","resolve","then","subscribeToEvents","setState","patch","Object","entries","forEach","key","handler","eventName","selector","split","querySelectorAll","element","addEventListener","CoordModel","latitude","longitude","WeatherInfoModel","city","temp","icon","coord","weatherInfo","name","main","weather","lat","lon","source","data","replaceLoop","replaceCondition","replaceVariable","replace","match","variableName","test","reduce","accumulator","propertyName","condition","action","index","collectionName","collectionItemName","repeatedSource","item","array","itemData","value","isFirst","isLast","length","notIsFirst","notIsLast","WeatherMainComponent","JSON","stringify","super","TemplateEngine","WeatherMapComponent","WeatherHistoryComponent","LocationInfoModel","country","locationInfo","LOCATION_URL","WEATHER_URL","WEATHER_API_KEY","async","result","response","fetch","ok","Error","status","json","error","console","message","url","locationName","saveWeatherInfo","filteredWeatherHistory","parse","localStorage","getItem","filter","wI","unshift","setItem","slice","validateCoord","Util","validateWeatherInfo","document","querySelector","e","preventDefault","search","weatherHistoryItem","target","closest","selectItemFromWeatherHistory","dataset","whItemId","API","currentLocationInfo","catch","WeatherInfo","weatherHistory","id","weatherInfoByLocationCoord","input","getElementById","weatherInfoByLocationName"],"sourceRoot":""}