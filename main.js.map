{"version":3,"file":"main.js","mappings":"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","sources":["webpack://otus-weather-app/./src/js/models/coord.ts","webpack://otus-weather-app/./src/js/models/weather-info.ts","webpack://otus-weather-app/./src/js/models/location-info.ts","webpack://otus-weather-app/./src/js/modules/api/api.ts","webpack://otus-weather-app/./src/js/modules/markup/markup.ts","webpack://otus-weather-app/./src/js/util/util.ts","webpack://otus-weather-app/./src/js/modules/weather-info/weather-info.ts","webpack://otus-weather-app/./src/js/modules/main/main.ts","webpack://otus-weather-app/./src/js/index.ts"],"sourcesContent":["export class CoordModel {\n  constructor(\n    public latitude: number = null,\n    public longitude: number = null\n  ) {}\n}\n","import { CoordModel } from \"./coord\";\nimport { WeatherInfoType } from \"../types/types\";\n\nexport class WeatherInfoModel {\n  city: string = null;\n\n  temp: number = null;\n\n  icon: string = null;\n\n  coord: CoordModel = new CoordModel();\n\n  constructor(weatherInfo?: WeatherInfoType) {\n    this.city = weatherInfo?.name ?? null;\n    this.temp = weatherInfo?.main.temp ?? null;\n    this.icon = weatherInfo?.weather[0].icon ?? null;\n    this.coord = new CoordModel(\n      weatherInfo?.coord.lat ?? null,\n      weatherInfo?.coord.lon ?? null\n    );\n  }\n}\n","import { GeoInfoType } from \"../types/types\";\nimport { CoordModel } from \"./coord\";\n\nexport class LocationInfoModel extends CoordModel {\n  country: string = null;\n\n  city: string = null;\n\n  constructor(locationInfo?: GeoInfoType) {\n    super(\n      locationInfo && locationInfo.latitude ? +locationInfo.latitude : null,\n      locationInfo && locationInfo.longitude ? +locationInfo.longitude : null\n    );\n\n    this.country = locationInfo?.country ?? null;\n    this.city = locationInfo?.city ?? null;\n  }\n}\n","import { LocationInfoModel } from \"../../models/location-info\";\nimport { WeatherInfoModel } from \"../../models/weather-info\";\nimport { WeatherInfoType } from \"../../types/types\";\n\nclass API {\n  LOCATION_URL = \"https://get.geojs.io/v1/ip/geo.json\";\n\n  WEATHER_URL = \"https://api.openweathermap.org/data/2.5/weather\";\n\n  WEATHER_API_KEY = \"1cf44d73b10a208539e8d4267c92ac9f\";\n\n  /**\n   * Получить геоданные пользователя\n   */\n  async getCurrentLocationInfo(): Promise<LocationInfoModel> {\n    let result = new LocationInfoModel();\n\n    try {\n      const response = await fetch(this.LOCATION_URL);\n\n      if (!response.ok) {\n        throw new Error(`HTTP response status ${response.status}`);\n      }\n\n      const json = await response.json();\n\n      result = new LocationInfoModel(json);\n    } catch (error) {\n      console.error(\n        `Error in API.getCurrentLocationInfo: ${\n          error instanceof Error ? error.message : error\n        }`\n      );\n    }\n\n    return result;\n  }\n\n  /**\n   * Получить информацию о погоде по географическим координатам\n   * @param {*} latitude Широта\n   * @param {*} longitude Долгота\n   */\n  async getWeatherInfoByLocationCoord(\n    latitude: number,\n    longitude: number\n  ): Promise<WeatherInfoModel> {\n    let result = new WeatherInfoModel();\n\n    try {\n      const url = `${this.WEATHER_URL}?lat=${latitude}&lon=${longitude}&appid=${this.WEATHER_API_KEY}&units=metric&lang=ru`;\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error(`HTTP response status ${response.status}`);\n      }\n\n      const json = (await response.json()) as WeatherInfoType;\n\n      result = new WeatherInfoModel(json);\n    } catch (error) {\n      console.error(\n        `Error in API.getWeatherInfoByLocationCoord: ${\n          error instanceof Error ? error.message : error\n        }`\n      );\n    }\n\n    return result;\n  }\n\n  /**\n   * Получить информацию о погоде по названию города\n   * @param {*} locationName Название города\n   */\n  async getWeatherInfoByLocationName(\n    locationName: string\n  ): Promise<WeatherInfoModel> {\n    let result = new WeatherInfoModel();\n\n    if (locationName) {\n      try {\n        const url = `${this.WEATHER_URL}?q=${locationName}&appid=${this.WEATHER_API_KEY}&units=metric&lang=ru`;\n        const response = await fetch(url);\n\n        if (!response.ok) {\n          throw new Error(`HTTP response status ${response.status}`);\n        }\n\n        const json = (await response.json()) as WeatherInfoType;\n\n        result = new WeatherInfoModel(json);\n      } catch (error) {\n        console.error(\n          `Error in API.getWeatherInfoByLocationName: ${\n            error instanceof Error ? error.message : error\n          }`\n        );\n      }\n    }\n\n    return result;\n  }\n}\n\nexport default new API();\n","import { CoordModel } from \"../../models/coord\";\nimport { WeatherInfoModel } from \"../../models/weather-info\";\n\nclass Markup {\n  /**\n   * Добавить изображение карты по координатам\n   * @param {CoordModel} coord Координаты\n   */\n  addStaticMapOnScreen(coord: CoordModel): void {\n    const weatherInfoBlock = document.getElementById(\"weather-map\");\n    const map = this.createMarkupElement(\"img\", {\n      src: `https://static-maps.yandex.ru/1.x/?ll=${coord.longitude},${coord.latitude}&size=650,350&z=12&l=map`,\n    });\n\n    weatherInfoBlock.innerHTML = \"\";\n    weatherInfoBlock.append(map);\n  }\n\n  /**\n   * Добавить на страницу Историю запросов погоды\n   */\n  addWeatherHistoryOnScreen(): void {\n    const weatherInfoBlock = document.getElementById(\"weather-history\");\n    weatherInfoBlock.innerHTML = \"\";\n\n    const weatherHistory = JSON.parse(\n      localStorage.getItem(\"weatherHistory\") ?? \"[]\"\n    );\n\n    for (let i = 0, count = weatherHistory.length; i < count; i++) {\n      const wrapper = this.createMarkupElement(\"span\", {\n        class: \"weather-history__item\",\n        \"data-wh-item-id\": `${i}`,\n      });\n      wrapper.innerHTML = weatherHistory[i].city;\n\n      weatherInfoBlock.append(wrapper);\n    }\n  }\n\n  /**\n   * Добавить на страницу информацию о погоде в выбранном населённом пункте\n   * @param {WeatherInfoModel} weatherInfo Информация о погоде\n   */\n  addWeatherMainOnScreen(weatherInfo: WeatherInfoModel): void {\n    const weatherMain = document.getElementById(\"weather-main\");\n    const weatherMainImg = this.createMarkupElement(\"img\", {\n      src: `http://openweathermap.org/img/w/${weatherInfo.icon}.png`,\n      class: \"weather-main__img\",\n    });\n    const weatherMainText = this.createMarkupElement(\"div\", {\n      class: \"weather-main__text\",\n    });\n\n    const paragraphCity = document.createElement(\"p\");\n    paragraphCity.innerHTML = `Город: ${weatherInfo.city}`;\n\n    const paragraphTemp = document.createElement(\"p\");\n    paragraphTemp.innerHTML = `Температура: ${weatherInfo.temp}&#176;С`;\n\n    weatherMain.innerHTML = \"\";\n    weatherMainText.append(paragraphCity, paragraphTemp);\n    weatherMain.append(weatherMainImg, weatherMainText);\n  }\n\n  /**\n   * Создать базовую разметку страницы\n   */\n  createInitialMarkup(): void {\n    const main = this.createMarkupElement(\"main\", { class: \"main\" });\n    const section = this.createMarkupElement(\"section\", { class: \"section\" });\n    const title = this.createMarkupElement(\"h1\", { class: \"title\" });\n    title.innerHTML = \"Weather App\";\n\n    const form = this.createMarkupElement(\"form\", {\n      class: \"form\",\n      id: \"form\",\n    });\n    const input = this.createMarkupElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter an address or city name\",\n      class: \"input\",\n      id: \"input\",\n    });\n    const button = this.createMarkupElement(\"button\", {\n      type: \"submit\",\n      class: \"btn\",\n      id: \"btn\",\n    });\n    button.innerHTML = \"Enter\";\n\n    const weatherInfo = this.createMarkupElement(\"div\", {\n      class: \"weather-info\",\n      id: \"weather-info\",\n    });\n    const weatherMain = this.createMarkupElement(\"div\", {\n      class: \"weather-info__item weather-main\",\n      id: \"weather-main\",\n    });\n    const weatherMap = this.createMarkupElement(\"div\", {\n      class: \"weather-info__item weather-map\",\n      id: \"weather-map\",\n    });\n    const weatherHistory = this.createMarkupElement(\"div\", {\n      class: \"weather-info__item weather-history\",\n      id: \"weather-history\",\n    });\n\n    weatherInfo.append(weatherMain, weatherMap, weatherHistory);\n    form.append(input, button);\n    section.append(title, form, weatherInfo);\n    main.append(section);\n\n    document.body.append(main);\n  }\n\n  /**\n   * Создать элемент разметки с атрибутами\n   * @param {string} tagName Название тега\n   * @param {*} attributes Список атрибутов и их значения для элемента разметки\n   */\n  createMarkupElement(\n    tagName: string,\n    attributes: { [key: string]: string }\n  ): HTMLElement {\n    const newMarkupElement = document.createElement(tagName);\n\n    Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\n      newMarkupElement.setAttribute(attributeName, attributeValue);\n    });\n\n    return newMarkupElement;\n  }\n\n  /**\n   * Удалить разметку\n   */\n  removeMarkup(): void {\n    document.body.innerHTML = \"\";\n  }\n}\n\nexport default new Markup();\n","const Util = {\n  isDefined<T>(value: T) {\n    return value !== null && typeof value !== \"undefined\";\n  },\n};\n\nexport default Util;\n","import { CoordModel } from \"../../models/coord\";\nimport { WeatherInfoModel } from \"../../models/weather-info\";\nimport Util from \"../../util/util\";\n\nclass WeatherInfo {\n  /**\n   * Сохранить информацию о погоде в Local Storage\n   * @param {WeatherInfoModel} weatherInfo Информация о погоде\n   */\n  saveWeatherInfo(weatherInfo: WeatherInfoModel) {\n    const weatherHistory = JSON.parse(\n      localStorage.getItem(\"weatherHistory\") ?? \"[]\"\n    );\n    const filteredWeatherHistory = weatherHistory.filter(\n      (wI: WeatherInfoModel) => wI.city !== weatherInfo.city\n    );\n\n    filteredWeatherHistory.unshift(weatherInfo);\n\n    localStorage.setItem(\n      \"weatherHistory\",\n      JSON.stringify(filteredWeatherHistory.slice(0, 10))\n    );\n  }\n\n  /**\n   * Проверить корректность координат\n   * @param {CoordModel} coord Координаты\n   */\n  validateCoord(coord: CoordModel) {\n    /**\n     * Проверить корректность широты\n     * @param {number} latitude Широта\n     */\n    function _validateLatitude(latitude: number) {\n      return Util.isDefined(latitude) && latitude <= 90 && latitude >= -90;\n    }\n\n    /**\n     * Проверить корректность долготы\n     * @param {number} longitude Долгота\n     */\n    function _validateLongitude(longitude: number) {\n      return Util.isDefined(longitude) && longitude <= 180 && longitude >= -180;\n    }\n\n    return (\n      coord instanceof CoordModel &&\n      _validateLatitude(coord.latitude) &&\n      _validateLongitude(coord.longitude)\n    );\n  }\n\n  /**\n   * Проверить корректность информации о погоде\n   * @param {WeatherInfoModel} weatherInfo Информация о погоде\n   */\n  validateWeatherInfo(weatherInfo: WeatherInfoModel) {\n    return (\n      weatherInfo instanceof WeatherInfoModel &&\n      Util.isDefined(weatherInfo.city) &&\n      Util.isDefined(weatherInfo.temp) &&\n      typeof weatherInfo.temp === \"number\" &&\n      this.validateCoord(weatherInfo.coord)\n    );\n  }\n}\n\nexport default new WeatherInfo();\n","import { WeatherInfoModel } from \"../../models/weather-info\";\nimport API from \"../api/api\";\nimport Markup from \"../markup/markup\";\nimport WeatherInfo from \"../weather-info/weather-info\";\nimport Util from \"../../util/util\";\n\nclass Main {\n  mainWeatherInfo: WeatherInfoModel;\n\n  constructor() {\n    this.mainWeatherInfo = new WeatherInfoModel();\n  }\n\n  /**\n   * Инициализировать главный экран\n   */\n  init() {\n    // 1) Создаём базовую разметку\n    Markup.createInitialMarkup();\n\n    // 2) Вешаем обработчики на элементы страницы\n    // 2.1) на форму отправки запроса информации о погоде\n    const form = document.getElementById(\"form\");\n    form.addEventListener(\"submit\", (event) => {\n      event.preventDefault();\n      this.search();\n    });\n\n    // 2.2) на блок \"История\"\n    const weatherHistoryBlock = document.getElementById(\"weather-history\");\n    weatherHistoryBlock.addEventListener(\"click\", (event) => {\n      const weatherHistoryItem = (event.target as HTMLElement).closest(\n        \".weather-history__item\"\n      );\n\n      if (weatherHistoryItem) {\n        this.selectItemFromWeatherHistory(\n          (weatherHistoryItem as HTMLElement).dataset.whItemId\n        );\n      }\n    });\n\n    // 3) Добавляем данные на главный экран\n    // 3.1) получаем геоданные пользователя\n    // 3.2) получаем информацию о погоде по местоположению пользователя\n    // 3.3) обновляем главный экран\n    API.getCurrentLocationInfo()\n      .then((currentLocationInfo) =>\n        API.getWeatherInfoByLocationCoord(\n          currentLocationInfo.latitude,\n          currentLocationInfo.longitude\n        )\n      )\n      .then((weatherInfo) => this.saveStateAndRefresh(weatherInfo))\n      .catch((error) => console.error(error));\n  }\n\n  /**\n   * Сохранить состояние и обновить главный экран\n   * @param {WeatherInfoModel} weatherInfo\n   */\n  async saveStateAndRefresh(weatherInfo: WeatherInfoModel) {\n    if (WeatherInfo.validateWeatherInfo(weatherInfo)) {\n      WeatherInfo.saveWeatherInfo(weatherInfo);\n\n      this.mainWeatherInfo = weatherInfo;\n\n      Markup.addWeatherMainOnScreen(this.mainWeatherInfo);\n      Markup.addStaticMapOnScreen(this.mainWeatherInfo.coord);\n      Markup.addWeatherHistoryOnScreen();\n    }\n  }\n\n  /**\n   * Выбрать элемент Истории\n   * @param {string} id ID записи Истории\n   */\n  async selectItemFromWeatherHistory(id: string) {\n    if (!Util.isDefined(id)) {\n      return;\n    }\n\n    const weatherHistory = JSON.parse(\n      localStorage.getItem(\"weatherHistory\") ?? \"[]\"\n    );\n    const weatherInfoByLocationCoord = await API.getWeatherInfoByLocationCoord(\n      weatherHistory[+id].coord.latitude,\n      weatherHistory[+id].coord.longitude\n    );\n\n    await this.saveStateAndRefresh(weatherInfoByLocationCoord);\n  }\n\n  /**\n   * Найти информацию о погоде в выбранном населенном пункте\n   */\n  async search() {\n    const input = document.getElementById(\"input\") as HTMLInputElement;\n\n    try {\n      const weatherInfoByLocationName = await API.getWeatherInfoByLocationName(\n        input.value\n      );\n\n      await this.saveStateAndRefresh(weatherInfoByLocationName);\n    } catch (error) {\n      console.error(`Error in Main.search: ${error}`);\n    } finally {\n      input.value = \"\";\n    }\n  }\n}\n\nexport default new Main();\n","import \"../css/style.css\";\nimport Main from \"./modules/main/main\";\n\nMain.init();\n"],"names":["CoordModel","constructor","latitude","longitude","WeatherInfoModel","city","temp","icon","coord","weatherInfo","this","name","main","weather","lat","lon","LocationInfoModel","country","locationInfo","super","LOCATION_URL","WEATHER_URL","WEATHER_API_KEY","async","result","response","fetch","ok","Error","status","json","error","console","message","url","locationName","addStaticMapOnScreen","weatherInfoBlock","document","getElementById","map","createMarkupElement","src","innerHTML","append","addWeatherHistoryOnScreen","weatherHistory","JSON","parse","localStorage","getItem","i","count","length","wrapper","class","addWeatherMainOnScreen","weatherMain","weatherMainImg","weatherMainText","paragraphCity","createElement","paragraphTemp","createInitialMarkup","section","title","form","id","input","type","placeholder","button","weatherMap","body","tagName","attributes","newMarkupElement","Object","entries","forEach","attributeName","attributeValue","setAttribute","removeMarkup","value","saveWeatherInfo","filteredWeatherHistory","filter","wI","unshift","setItem","stringify","slice","validateCoord","Util","validateWeatherInfo","mainWeatherInfo","init","Markup","addEventListener","event","preventDefault","search","weatherHistoryItem","target","closest","selectItemFromWeatherHistory","dataset","whItemId","API","then","currentLocationInfo","saveStateAndRefresh","catch","WeatherInfo","weatherInfoByLocationCoord","weatherInfoByLocationName","Main"],"sourceRoot":""}