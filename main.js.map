{"version":3,"file":"main.js","mappings":"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","sources":["webpack://otus-weather-app/./src/js/models/coord.js","webpack://otus-weather-app/./src/js/models/weather-info.js","webpack://otus-weather-app/./src/js/models/location-info.js","webpack://otus-weather-app/./src/js/modules/location-info/location-info.js","webpack://otus-weather-app/./src/js/modules/markup/markup.js","webpack://otus-weather-app/./src/js/util/util.js","webpack://otus-weather-app/./src/js/modules/weather-info/weather-info.js","webpack://otus-weather-app/./src/js/modules/main/main.js","webpack://otus-weather-app/./src/js/index.js"],"sourcesContent":["export class CoordModel {\n  latitude = null;\n\n  longitude = null;\n\n  constructor(latitude, longitude) {\n    this.latitude = latitude;\n    this.longitude = longitude;\n  }\n}\n","import { CoordModel } from \"./coord\";\n\nexport class WeatherInfoModel {\n  city = null;\n\n  temp = null;\n\n  icon = null;\n\n  coord = new CoordModel();\n\n  constructor(weatherInfo) {\n    this.city = weatherInfo?.name ?? null;\n    this.temp = weatherInfo?.main.temp ?? null;\n    this.icon = weatherInfo?.weather[0].icon ?? null;\n    this.coord = new CoordModel(\n      weatherInfo?.coord.lat ?? null,\n      weatherInfo?.coord.lon ?? null\n    );\n  }\n}\n","import { CoordModel } from \"./coord\";\n\nexport class LocationInfoModel extends CoordModel {\n  country = null;\n\n  city = null;\n\n  constructor(locationInfo) {\n    super(locationInfo?.latitude ?? null, locationInfo?.longitude ?? null);\n\n    this.country = locationInfo?.country ?? null;\n    this.city = locationInfo?.city ?? null;\n  }\n}\n","import { LocationInfoModel } from \"../../models/location-info\";\n\nclass LocationInfo {\n  LOCATION_URL = \"https://get.geojs.io/v1/ip/geo.json\";\n\n  /**\n   * Получить геоданные пользователя\n   */\n  async getCurrentLocationInfo() {\n    let result = new LocationInfoModel();\n\n    try {\n      const response = await fetch(this.LOCATION_URL);\n\n      if (!response.ok) {\n        throw new Error(`HTTP response status ${response.status}`);\n      }\n\n      const json = await response.json();\n\n      result = new LocationInfoModel(json);\n    } catch (error) {\n      console.error(\n        `Error in Location.getCurrentLocationInfo: ${error.message}`\n      );\n    }\n\n    return result;\n  }\n}\n\nexport default new LocationInfo();\n","class Markup {\n  /**\n   * Добавить изображение карты по координатам\n   * @param {Coord} coord Координаты\n   */\n  addStaticMapOnScreen(coord) {\n    const weatherInfoBlock = document.getElementById(\"weather-map\");\n    const map = this.createMarkupElement(\"img\", {\n      src: `https://static-maps.yandex.ru/1.x/?ll=${coord.longitude},${coord.latitude}&size=650,350&z=12&l=map`,\n    });\n\n    weatherInfoBlock.innerHTML = \"\";\n    weatherInfoBlock.append(map);\n  }\n\n  /**\n   * Добавить на страницу Историю запросов погоды\n   */\n  addWeatherHistoryOnScreen() {\n    const weatherInfoBlock = document.getElementById(\"weather-history\");\n    weatherInfoBlock.innerHTML = \"\";\n\n    const weatherHistory = JSON.parse(\n      localStorage.getItem(\"weatherHistory\") ?? \"[]\"\n    );\n\n    for (let i = 0, count = weatherHistory.length; i < count; i++) {\n      const wrapper = this.createMarkupElement(\"span\", {\n        class: \"weather-history__item\",\n        \"data-wh-item-id\": i,\n      });\n      wrapper.innerHTML = weatherHistory[i].city;\n\n      weatherInfoBlock.append(wrapper);\n    }\n  }\n\n  /**\n   * Добавить на страницу информацию о погоде в выбранном населённом пункте\n   * @param {WeatherInfoModel} weatherInfo Информация о погоде\n   */\n  addWeatherMainOnScreen(weatherInfo) {\n    const weatherMain = document.getElementById(\"weather-main\");\n    const weatherMainImg = this.createMarkupElement(\"img\", {\n      src: `http://openweathermap.org/img/w/${weatherInfo.icon}.png`,\n      class: \"weather-main__img\",\n    });\n    const weatherMainText = this.createMarkupElement(\"div\", {\n      class: \"weather-main__text\",\n    });\n\n    const paragraphCity = document.createElement(\"p\");\n    paragraphCity.innerHTML = `Город: ${weatherInfo.city}`;\n\n    const paragraphTemp = document.createElement(\"p\");\n    paragraphTemp.innerHTML = `Температура: ${weatherInfo.temp}&#176;С`;\n\n    weatherMain.innerHTML = \"\";\n    weatherMainText.append(paragraphCity, paragraphTemp);\n    weatherMain.append(weatherMainImg, weatherMainText);\n  }\n\n  /**\n   * Создать базовую разметку страницы\n   */\n  createInitialMarkup() {\n    const main = this.createMarkupElement(\"main\", { class: \"main\" });\n    const section = this.createMarkupElement(\"section\", { class: \"section\" });\n    const title = this.createMarkupElement(\"h1\", { class: \"title\" });\n    title.innerHTML = \"Weather App\";\n\n    const form = this.createMarkupElement(\"form\", {\n      class: \"form\",\n      id: \"form\",\n    });\n    const input = this.createMarkupElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter an address or city name\",\n      class: \"input\",\n      id: \"input\",\n    });\n    const button = this.createMarkupElement(\"button\", {\n      type: \"submit\",\n      class: \"btn\",\n      id: \"btn\",\n    });\n    button.innerHTML = \"Enter\";\n\n    const weatherInfo = this.createMarkupElement(\"div\", {\n      class: \"weather-info\",\n      id: \"weather-info\",\n    });\n    const weatherMain = this.createMarkupElement(\"div\", {\n      class: \"weather-info__item weather-main\",\n      id: \"weather-main\",\n    });\n    const weatherMap = this.createMarkupElement(\"div\", {\n      class: \"weather-info__item weather-map\",\n      id: \"weather-map\",\n    });\n    const weatherHistory = this.createMarkupElement(\"div\", {\n      class: \"weather-info__item weather-history\",\n      id: \"weather-history\",\n    });\n\n    weatherInfo.append(weatherMain, weatherMap, weatherHistory);\n    form.append(input, button);\n    section.append(title, form, weatherInfo);\n    main.append(section);\n\n    document.body.append(main);\n  }\n\n  /**\n   * Создать элемент разметки с атрибутами\n   * @param {string} tagName Название тега\n   * @param {*} attributes Список атрибутов и их значения для элемента разметки\n   */\n  createMarkupElement(tagName, attributes) {\n    const newMarkupElement = document.createElement(tagName);\n\n    Object.entries(attributes).forEach(([attributeName, attributeValue]) => {\n      newMarkupElement.setAttribute(attributeName, attributeValue);\n    });\n\n    return newMarkupElement;\n  }\n\n  /**\n   * Удалить разметку\n   */\n  removeMarkup() {\n    document.body.innerHTML = \"\";\n  }\n}\n\nexport default new Markup();\n","const Util = {\n  isDefined(value) {\n    return value !== null && typeof value !== \"undefined\";\n  },\n};\n\nexport default Util;\n","import { CoordModel } from \"../../models/coord\";\nimport { WeatherInfoModel } from \"../../models/weather-info\";\nimport Util from \"../../util/util\";\n\nclass WeatherInfo {\n  WEATHER_URL = \"https://api.openweathermap.org/data/2.5/weather\";\n\n  WEATHER_API_KEY = \"1cf44d73b10a208539e8d4267c92ac9f\";\n\n  /**\n   * Получить информацию о погоде по географическим координатам\n   * @param {*} latitude Широта\n   * @param {*} longitude Долгота\n   */\n  async getWeatherInfoByLocationCoord(latitude, longitude) {\n    let result = new WeatherInfoModel();\n\n    try {\n      const url = `${this.WEATHER_URL}?lat=${latitude}&lon=${longitude}&appid=${this.WEATHER_API_KEY}&units=metric&lang=ru`;\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error(`HTTP response status ${response.status}`);\n      }\n\n      const json = await response.json();\n\n      result = new WeatherInfoModel(json);\n    } catch (error) {\n      console.error(\n        `Error in WeatherInfo.getWeatherInfoByLocationCoord: ${error.message}`\n      );\n    }\n\n    return result;\n  }\n\n  /**\n   * Получить информацию о погоде по названию города\n   * @param {*} locationName Название города\n   */\n  async getWeatherInfoByLocationName(locationName) {\n    let result = new WeatherInfoModel();\n\n    if (locationName) {\n      try {\n        const url = `${this.WEATHER_URL}?q=${locationName}&appid=${this.WEATHER_API_KEY}&units=metric&lang=ru`;\n        const response = await fetch(url);\n\n        if (!response.ok) {\n          throw new Error(`HTTP response status ${response.status}`);\n        }\n\n        const json = await response.json();\n\n        result = new WeatherInfoModel(json);\n      } catch (error) {\n        console.error(\n          `Error in WeatherInfo.getWeatherInfoByLocationName: ${error.message}`\n        );\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Сохранить информацию о погоде в Local Storage\n   * @param {WeatherInfoModel} weatherInfo Информация о погоде\n   */\n  saveWeatherInfo(weatherInfo) {\n    const weatherHistory = JSON.parse(\n      localStorage.getItem(\"weatherHistory\") ?? \"[]\"\n    );\n    const filteredWeatherHistory = weatherHistory.filter(\n      (wI) => wI.city !== weatherInfo.city\n    );\n\n    filteredWeatherHistory.unshift(weatherInfo);\n\n    localStorage.setItem(\n      \"weatherHistory\",\n      JSON.stringify(filteredWeatherHistory.slice(0, 10))\n    );\n  }\n\n  /**\n   * Проверить корректность координат\n   * @param {CoordModel} coord Координаты\n   */\n  validateCoord(coord) {\n    /**\n     * Проверить корректность широты\n     * @param {number} latitude Широта\n     */\n    function _validateLatitude(latitude) {\n      return Util.isDefined(latitude) && +latitude <= 90 && +latitude >= -90;\n    }\n\n    /**\n     * Проверить корректность долготы\n     * @param {number} longitude Долгота\n     */\n    function _validateLongitude(longitude) {\n      return (\n        Util.isDefined(longitude) && +longitude <= 180 && +longitude >= -180\n      );\n    }\n\n    return (\n      coord instanceof CoordModel &&\n      _validateLatitude(coord.latitude) &&\n      _validateLongitude(coord.longitude)\n    );\n  }\n\n  /**\n   * Проверить корректность информации о погоде\n   * @param {WeatherInfoModel} weatherInfo Информация о погоде\n   */\n  validateWeatherInfo(weatherInfo) {\n    return (\n      weatherInfo instanceof WeatherInfoModel &&\n      Util.isDefined(weatherInfo.city) &&\n      Util.isDefined(weatherInfo.temp) &&\n      typeof weatherInfo.temp === \"number\" &&\n      this.validateCoord(weatherInfo.coord)\n    );\n  }\n}\n\nexport default new WeatherInfo();\n","import { WeatherInfoModel } from \"../../models/weather-info\";\nimport LocationInfo from \"../location-info/location-info\";\nimport Markup from \"../markup/markup\";\nimport WeatherInfo from \"../weather-info/weather-info\";\nimport Util from \"../../util/util\";\n\nclass Main {\n  constructor() {\n    this.mainWeatherInfo = new WeatherInfoModel();\n  }\n\n  /**\n   * Инициализировать главный экран\n   */\n  init() {\n    // 1) Создаём базовую разметку\n    Markup.createInitialMarkup();\n\n    // 2) Вешаем обработчики на элементы страницы\n    // 2.1) на форму отправки запроса информации о погоде\n    const form = document.getElementById(\"form\");\n    form.addEventListener(\"submit\", (event) => {\n      event.preventDefault();\n      this.search();\n    });\n\n    // 2.2) на блок \"История\"\n    const weatherHistoryBlock = document.getElementById(\"weather-history\");\n    weatherHistoryBlock.addEventListener(\"click\", (event) => {\n      const weatherHistoryItem = event.target.closest(\".weather-history__item\");\n\n      if (weatherHistoryItem) {\n        this.selectItemFromWeatherHistory(weatherHistoryItem.dataset.whItemId);\n      }\n    });\n\n    // 3) Добавляем данные на главный экран\n    // 3.1) получаем геоданные пользователя\n    // 3.2) получаем информацию о погоде по местоположению пользователя\n    // 3.3) обновляем главный экран\n    LocationInfo.getCurrentLocationInfo()\n      .then((currentLocationInfo) =>\n        WeatherInfo.getWeatherInfoByLocationCoord(\n          currentLocationInfo.latitude,\n          currentLocationInfo.longitude\n        )\n      )\n      .then((weather) => this.refresh(weather))\n      .catch((error) => console.error(error));\n  }\n\n  /**\n   * Сохранить предыдущее состояние\n   * @param {WeatherInfoModel} weatherInfo\n   */\n  async savePrevStateAndRefresh(weatherInfo) {\n    if (WeatherInfo.validateWeatherInfo(weatherInfo)) {\n      WeatherInfo.saveWeatherInfo(this.mainWeatherInfo);\n\n      this.refresh(weatherInfo);\n    }\n  }\n\n  /**\n   * Выбрать элемент Истории\n   * @param {string} id ID записи Истории\n   */\n  async selectItemFromWeatherHistory(id) {\n    if (!Util.isDefined(id)) {\n      return;\n    }\n\n    const weatherHistory = JSON.parse(\n      localStorage.getItem(\"weatherHistory\") ?? \"[]\"\n    );\n    const weatherInfoByLocationCoord =\n      await WeatherInfo.getWeatherInfoByLocationCoord(\n        weatherHistory[+id].coord.latitude,\n        weatherHistory[+id].coord.longitude\n      );\n\n    await this.savePrevStateAndRefresh(weatherInfoByLocationCoord);\n  }\n\n  /**\n   * Обновить главный экран\n   * @param {WeatherInfoModel} weatherInfo Информация о погоде\n   */\n  refresh(weatherInfo) {\n    this.mainWeatherInfo = weatherInfo;\n\n    Markup.addWeatherMainOnScreen(this.mainWeatherInfo);\n    Markup.addStaticMapOnScreen(this.mainWeatherInfo.coord);\n    Markup.addWeatherHistoryOnScreen();\n  }\n\n  /**\n   * Найти информацию о погоде в выбранном населенном пункте\n   */\n  async search() {\n    const input = document.getElementById(\"input\");\n\n    try {\n      const weatherInfoByLocationName =\n        await WeatherInfo.getWeatherInfoByLocationName(input.value);\n\n      await this.savePrevStateAndRefresh(weatherInfoByLocationName);\n    } catch (error) {\n      console.error(`Error in Main.search: ${error}`);\n    } finally {\n      input.value = \"\";\n    }\n  }\n}\n\nexport default new Main();\n","import \"../css/style.css\";\nimport Main from \"./modules/main/main\";\n\nMain.init();\n"],"names":["CoordModel","latitude","longitude","constructor","this","WeatherInfoModel","city","temp","icon","coord","weatherInfo","name","main","weather","lat","lon","LocationInfoModel","country","locationInfo","super","LOCATION_URL","async","result","response","fetch","ok","Error","status","json","error","console","message","addStaticMapOnScreen","weatherInfoBlock","document","getElementById","map","createMarkupElement","src","innerHTML","append","addWeatherHistoryOnScreen","weatherHistory","JSON","parse","localStorage","getItem","i","count","length","wrapper","class","addWeatherMainOnScreen","weatherMain","weatherMainImg","weatherMainText","paragraphCity","createElement","paragraphTemp","createInitialMarkup","section","title","form","id","input","type","placeholder","button","weatherMap","body","tagName","attributes","newMarkupElement","Object","entries","forEach","attributeName","attributeValue","setAttribute","removeMarkup","value","WEATHER_URL","WEATHER_API_KEY","url","locationName","saveWeatherInfo","filteredWeatherHistory","filter","wI","unshift","setItem","stringify","slice","validateCoord","Util","validateWeatherInfo","mainWeatherInfo","init","Markup","addEventListener","event","preventDefault","search","weatherHistoryItem","target","closest","selectItemFromWeatherHistory","dataset","whItemId","LocationInfo","then","currentLocationInfo","WeatherInfo","refresh","catch","weatherInfoByLocationCoord","savePrevStateAndRefresh","weatherInfoByLocationName","Main"],"sourceRoot":""}